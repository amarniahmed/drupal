<?php
use Drupal\Core\Routing\RouteMatchinterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\UserInterface;


function hello_cron(){

    drupal_set_message('hello cron');
    $purge_days_number =\Drupal::config('hello.settings')->get('purge_days_number');

    drupal_set_message('hello cron');

    if($purge_days_number !='0'){

        $nombre_suppression = \Drupal::database()
            ->delete('hello_user_statistics')
            ->condition('time', $purge_days_number*(24*3600), '<=')
            ->execute();
    }
    \Drupal::messenger()
        ->addMessage(t('@nombre_suppression records hase been deleted.',['@nombre_suppression'=> $purge_days_number]));
}

/**
 * @param $route_name
 * @param RouteMatchinterface $route_match
 * @return string
 */
function hello_help($route_name,RouteMatchInterface $route_match){
    switch($route_name) {
        case 'help.page.hello':
            return '<p>'.t('this module aims at routing user connections activity').'</p>';
    }
}

/**
 * @param UserInterface $acount
 */
function hello_user_login(UserInterface $account)
                                               {

    //ksm($acount);

    \Drupal::messenger()->addMessage(t('welcom dear %name! vous etes connecté !',
        ['%name' => $account->getAccountName()]));

    $database = \Drupal::database();
    $time_connexion = REQUEST_TIME;
    $iduser = $account->id();


    $roles = \Drupal::config('hello.settings')->get('user_statistics_role');
    $role_user = $account->getRoles();
    $commun = array_intersect($roles, $role_user);

    if (count($commun) > 0) {

        $database->insert('hello_user_statistics')->fields(['uid' => $iduser,
            'time' => $time_connexion,
            'action' => 0,
        ])->execute();
    }
}
function hello_user_logout(AccountInterface $account){






    $database = \Drupal::database();
    $time_deconnexion= REQUEST_TIME;
    $iduser=$account->id();


    $roles=\Drupal::config('hello.settings')->get('hello_user_role');
    $role_user=$account->getRoles();
    $commun= array_intersect($roles,$role_user);

    if(count($commun)>0) {

        $database->insert('hello_user_statistics')->fields(['uid' => $iduser,
            'time' => $time_deconnexion,
            'action' => 0,
        ])->execute();

    }

}

function hello_user_delete(UserInterface $account){

    $database = \Drupal::database();
   // $time_deconnexion= REQUEST_TIME;
    $iduser=$account->id();
    //$User->delete();
    $database->delete('hello_user_statistics')->condition('uid', $iduser)->execute();
}

function hello_user_connexions(UserInterface $user){

    $iduser =$user->id();
    $message=$this->t('recuperation des données de  %user passé en paramettre dans lurl',[
        '%user'=> $user->getAccountName()]);
    $stat_user_connexion= \Drupal::database()->select('hello_user_statistics','stat')->fields('stat',[])
        ->condition('uid',$iduser)
        ->execute();
    $number_connxions=0;
    $rows=[];
    foreach ($stat_user_connexion as $stats)
    {

        if ($stats->action){
            $number_connxions ++;
        $etat='actif';}
        else{
        $etat='desactivé';
    }
        $time= \Drupal::service('date.formatter')->format($stats->time, 'custom', 'H:i s\s');
        $rows[]=[ $etat, $time];
    }
    $tab =[
        '#theme'=> 'table',
        '#header'=> ['Action', 'Time'],
        '#rows'=> $rows,
    ];

   return $tab;
}

function hello_theme($existing,$type,$theme,$path){
    return array(
     'hello'=> array(
         'template'=> 'hello',
         'variables'=>array('data'=>NULL, 'user', 'header','count'),
                     ),
               );
    }

function hello_form_user_admin_settings_alter(array &$form,\Drupal\Core\Form
\FormStateInterface &$form_state, $form_id){

    $roles=\Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();
    $checked_roles = \Drupal::config('hello.settings')->get('user_statistics_role');

   unset($roles['anonymous']);

    $items=[];
    foreach ($roles as $item){
        $items[$item->id()] = $item->label();
    }

    $form['role'] = array('#type' => 'checkboxes',
        '#options' =>$items,
        '#default_value' => $checked_roles,
        );

    $form['#submit'][]='hello_admin_user_settings_submit';

   // $roles=$this->entityTypeManager()->getStorage(user_role_load());
    //$form_state->getValues('admin_role');
   //ksm($form);
}

function hello_admin_user_settings_submit($form, FormStateInterface $form_state){
    $config=\Drupal::configFactory()->getEditable('hello.settings');
    $config->set('user_statistics_role',$form_state->getValue('role'))
        ->save();

}
